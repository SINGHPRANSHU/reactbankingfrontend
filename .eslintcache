[{"C:\\Users\\pranshu\\Documents\\bankingfrontend\\src\\index.js":"1","C:\\Users\\pranshu\\Documents\\bankingfrontend\\src\\reportWebVitals.js":"2","C:\\Users\\pranshu\\Documents\\bankingfrontend\\src\\App.js":"3","C:\\Users\\pranshu\\Documents\\bankingfrontend\\src\\page\\home.js":"4","C:\\Users\\pranshu\\Documents\\bankingfrontend\\src\\page\\transferto.js":"5","C:\\Users\\pranshu\\Documents\\bankingfrontend\\src\\page\\viewallcustomers.js":"6","C:\\Users\\pranshu\\Documents\\bankingfrontend\\src\\components\\navbar.js":"7","C:\\Users\\pranshu\\Documents\\bankingfrontend\\src\\context\\usersinfo.js":"8","C:\\Users\\pranshu\\Documents\\bankingfrontend\\src\\context\\transactioninfo.js":"9","C:\\Users\\pranshu\\Documents\\bankingfrontend\\src\\page\\transactions.js":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":2127,"mtime":1609869584884,"results":"14","hashOfConfig":"12"},{"size":2389,"mtime":1609865880693,"results":"15","hashOfConfig":"12"},{"size":6251,"mtime":1610023073601,"results":"16","hashOfConfig":"12"},{"size":1761,"mtime":1609865747671,"results":"17","hashOfConfig":"12"},{"size":1792,"mtime":1610023320407,"results":"18","hashOfConfig":"12"},{"size":342,"mtime":1609828938002,"results":"19","hashOfConfig":"12"},{"size":380,"mtime":1609829182779,"results":"20","hashOfConfig":"12"},{"size":1147,"mtime":1610023531954,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"ycwe8g",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\pranshu\\Documents\\bankingfrontend\\src\\index.js",[],["46","47"],"C:\\Users\\pranshu\\Documents\\bankingfrontend\\src\\reportWebVitals.js",[],"C:\\Users\\pranshu\\Documents\\bankingfrontend\\src\\App.js",["48","49","50"],"\n\nimport React,{useEffect,useContext} from \"react\";\nimport {UserProvider} from \"./context/usersinfo\"\nimport {TransactionProvider} from \"./context/transactioninfo\"\nimport {UserContext} from \"./context/usersinfo\"\nimport {TransactionContext} from \"./context/transactioninfo\"\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport Home from \"./page/home\";\nimport Viewall from \"./page/viewallcustomers\";\n\nimport TransferTO from \"./page/transferto\";\nimport  Transaction from \"./page/transactions\"\n\n\nimport Navbar from \"./components/navbar\";\n\n\n\n\nfunction Routing() {\n\n  let [customers,setCustomers] =useContext(UserContext);\n  let [transaction,setTransaction] =useContext(TransactionContext);\n\n  let fetchdata = ()=>{\n    fetch('https://transactionrest.herokuapp.com/api/customers', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    .then(response => response.json())\n    .then(data => {\n      setCustomers([...data])\n      \n    })\n    .catch((error) => {\n      console.error('Error:', error);\n    });\n\n    fetch('https://transactionrest.herokuapp.com/api/alltransaction', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    .then(response => response.json())\n    .then(data => {\n      setTransaction([...(data).reverse()])\n    })\n    .catch((error) => {\n      console.error('Error:', error);\n    });\n}\n\n\nuseEffect(fetchdata,[]);\n  return (\n\n   \n    <Router>\n      <div>\n      \n      <Navbar />   \n\n        <Switch>\n          \n          <Route path=\"/viewall\">\n            <Viewall />\n          </Route>\n          <Route path=\"/transferto\">\n            <TransferTO />\n          </Route>\n          <Route path=\"/transactions\">\n            <Transaction />\n          </Route>\n          \n          <Route path=\"/\" exact={true}>\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n\nexport default function App() {\n  return (\n    <TransactionProvider>\n      <UserProvider>\n        <Routing/>\n      </UserProvider>\n    </TransactionProvider>\n   \n  );\n}\n\n\n\n\n\n","C:\\Users\\pranshu\\Documents\\bankingfrontend\\src\\page\\home.js",[],"C:\\Users\\pranshu\\Documents\\bankingfrontend\\src\\page\\transferto.js",["51","52"],"import {useState, useEffect,useContext } from \"react\";\r\nimport { useLocation,useHistory } from \"react-router-dom\";\r\nimport \"../components/componentscss/transferto.css\"\r\nimport {UserContext} from \"../context/usersinfo\"\r\nimport \"../components/componentscss/sendbutton.css\"\r\nimport \"../components/componentscss/declinebutton.css\"\r\n\r\n\r\n\r\nimport {TransactionContext} from \"../context/transactioninfo\"\r\n\r\n\r\n\r\n\r\nexport default function TransferTo() {\r\n  let [id,setId]=useState(\"\");\r\n  let [name,setName]=useState(\"\");\r\n  let [amount,setAmount]  = useState(1);\r\n  let [selected,setSelected] = useState(0);\r\n  let [comp,setComp] =useState(false);\r\n  let [err,setErr] =useState(false);\r\n  let [minerr,setMinerr] =useState(false);\r\n  let [selecterr,setSelecrerr] =useState(false);\r\n  let [loading,setLoading] = useState(\"\");\r\n  let [stringerr,setStringerr] = useState(false);\r\n\r\n  let [receivers,setReceivers]=useState([]);\r\n  let [customers,setCustomers] =useContext(UserContext);\r\n  let [transaction,setTransaction] =useContext(TransactionContext);\r\n  \r\n\r\n  \r\n\r\n\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  \r\n  const compare = (str1,str2)=>{\r\n   let result =str1.localeCompare(str2);\r\n   if(result===0){\r\n     return false\r\n   }else{\r\n     return true\r\n   }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(!location.state){\r\n      history.push(\"/viewall\")\r\n      return\r\n    }\r\n    setId(location.state._id)\r\n    setName(location.state.name)\r\n    setReceivers(customers.filter(customer=>compare(customer._id,location.state._id)))\r\n }, [location]);\r\n  \r\n \r\n\r\n const handleChange = (e)=>{\r\n e.preventDefault();\r\n setSelected(e.target.value) \r\n setName()\r\n };\r\n\r\n\r\n const submitdata = (e)=>{\r\n  e.preventDefault()\r\n  setErr(false);\r\n  setMinerr(false);\r\n  setSelecrerr(false);\r\n  setComp(false)\r\n  if(typeof amount !== 'number'){\r\n    setStringerr(true);\r\n    setTimeout(() => {\r\n      setStringerr(false)\r\n    }, 2000);\r\n    return\r\n  }\r\n  if(amount<=0){\r\n    setMinerr(true);\r\n    setTimeout(() => {\r\n      setMinerr(false)\r\n    }, 2000);\r\n    return\r\n  }\r\n  if(selected===0){\r\n    setSelecrerr(true);\r\n    setTimeout(() => {\r\n      setSelecrerr(false)\r\n    }, 2000);\r\n    return\r\n  }\r\n  setLoading(\"loader\")\r\n   const receiver = receivers.find(customer=>compare(customer._id,id));\r\n   const data ={\r\n    senderid:id,\r\n    sendername:name,\r\n    receivername:receiver.name,\r\n    balance:parseInt(amount),\r\n    receiverid:selected\r\n\r\n   }\r\n   console.log(data);\r\n   \r\n   fetch('https://transactionrest.herokuapp.com/api/customer/update', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(data),\r\n  })\r\n  .then(response => response.json())\r\n  .then(result => {\r\n   \r\n   if(result.status){\r\n    setLoading(\"\")\r\n    setErr(true)\r\n    setTimeout(() => {\r\n      setErr(false)\r\n    }, 3000);\r\n   }else{\r\n    setLoading(\"\")\r\n    setComp(true)\r\n    setTimeout(() => {\r\n     \r\n    setComp(false)\r\n     \r\n    }, 3000);\r\n\r\n    fetch('https://transactionrest.herokuapp.com/api/customers', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n    .then(response => response.json())\r\n    .then(result =>{\r\n     setCustomers([...result])\r\n     })\r\n   .catch(error=>{console.log(error);})\r\n\r\n    \r\n   fetch('https://transactionrest.herokuapp.com/api/alltransaction', {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  })\r\n  .then(response => response.json())\r\n  .then(result =>{\r\n   setTransaction([...(result).reverse()])\r\n   })\r\n .catch(error=>{console.log(error);})\r\n\r\n    \r\n    }\r\n    \r\n  })\r\n  .catch((error) => {\r\n    console.error('Error:', error);\r\n  });\r\n\r\n }\r\n    \r\n\r\n\r\n \r\n return (\r\n         \r\n         \r\n        <div className=\"transferdiv\">\r\n            <label for=\"fname\">From</label>\r\n            <input type=\"text\" id=\"fname\" name=\"firstname\" placeholder=\"Your name..\" value={name}/>\r\n\r\n            <label for=\"lname\">Sender Id</label>\r\n            <input type=\"text\" id=\"lname\" name=\"id\" placeholder=\"Your Id\" value={id}/>\r\n           \r\n            <label for=\"lname\">Amount</label>\r\n            <input type=\"text\" id=\"lname\" name=\"amount\" placeholder=\"Enter amount\" value={amount} onChange={(e)=>setAmount(e.target.value)}/>\r\n\r\n            <label for=\"transfer to\">Transfer To</label>\r\n            <select  name=\"receiver\" onChange={handleChange}  >\r\n                <option value={selected} >select to transfer</option>\r\n                  {receivers.map(customer=>(\r\n                    \r\n                      <option value={customer._id} >{customer.name}</option>\r\n                    \r\n                  ))}             \r\n            </select>\r\n            <div style={{display:\"flex\",flexDirection:\"row\"}} className=\"buttondiv\">\r\n              <div style={{width:\"50%\"}}>\r\n              <button className=\" button2\" onClick={()=>{history.push(\"/viewall\")}}>Decline</button>\r\n              </div>\r\n              <div style={{width:\"50%\"}}>\r\n              <button className=\"button1\" style={{float:\"right\"}} onClick={(e)=>submitdata(e)}>Transfer</button>\r\n              </div>\r\n            </div>\r\n            \r\n            {comp? <div style={{width:\"100%\"}}>\r\n        <h6 style={{display:\"flex\",justifyContent:\"center\",color:\"green\"}} >Money Transferred</h6>\r\n      </div>:<div></div>}\r\n            {stringerr? <div style={{width:\"100%\"}}>\r\n        <h6 style={{display:\"flex\",justifyContent:\"center\",color:\"red\"}} >Enter Valid Number</h6>\r\n      </div>:<div></div>}\r\n            {err? <div style={{width:\"100%\"}}>\r\n        <h6 style={{display:\"flex\",justifyContent:\"center\",color:\"red\"}} >Please Check Your Balance</h6>\r\n      </div>:<div></div>}\r\n            {minerr? <div style={{width:\"100%\"}}>\r\n        <h6 style={{display:\"flex\",justifyContent:\"center\",color:\"red\"}} >Send 1 Or More </h6>\r\n      </div>:<div></div>}\r\n            {selecterr? <div style={{width:\"100%\"}}>\r\n        <h6 style={{display:\"flex\",justifyContent:\"center\",color:\"red\"}} >Select Someone </h6>\r\n      </div>:<div></div>}\r\n      \r\n       <div style={{display:\"flex\",justifyContent:\"center\"}}>     \r\n         <div class={loading} ></div>\r\n      </div>   \r\n        </div>\r\n      \r\n      \r\n         );\r\n\r\n  }","C:\\Users\\pranshu\\Documents\\bankingfrontend\\src\\page\\viewallcustomers.js",["53","54"],"import {useEffect,useContext} from \"react\"\r\nimport \"../components/componentscss/transferbutton.css\"\r\nimport { useHistory } from 'react-router-dom';\r\nimport {UserContext} from \"../context/usersinfo\"\r\nimport \"../components/componentscss/viewall.css\"\r\n\r\nexport default function Viewall() {\r\n \r\n  let [customers,setCustomers] =useContext(UserContext);\r\n \r\n   \r\n    const history = useHistory();\r\n\r\n    \r\n\r\n    const handleClick = (_id,name) => {\r\n     \r\n     \r\n      history.push({pathname:\"/transferto\",search: '',state: { name,_id}});\r\n  }\r\n\r\n    \r\n\r\n    let list = customers.map(customer=>(\r\n      <div style={{display:\"flex\",flexDirection:\"row\",backgroundColor:\"#bbb\",margin:\"2em\",width:\"80%\",padding:\"1em\",border:\"6px solid grey\" }} key={customer._id} className=\"rootdiv\">\r\n        <div style={{display:\"flex\",flexDirection:\"column\",width:\"40%\"}}  > \r\n        <h4 style={{fontWeight:\"bolder\",float:\"left\"}}>Name</h4>\r\n        <h4 style={{fontWeight:\"bolder\"}}>Email</h4>\r\n        <h4 style={{fontWeight:\"bolder\"}}>CurBal</h4>\r\n\r\n        </div>\r\n        <div style={{display:\"flex\",flexDirection:\"column\",justifyContent:\"space-around\"}} >\r\n        <h4 style={{fontWeight:\"bolder\"}}>{customer.name}</h4>\r\n        <h4 style={{fontWeight:\"bolder\"}}>{customer.email}</h4>\r\n        <h4 style={{fontWeight:\"bolder\"}}>{customer.balance}</h4>\r\n        \r\n        <button className=\"button button1\" onClick={()=>handleClick(customer._id,customer.name)}><span>Transfer</span></button>\r\n        </div>\r\n     \r\n      </div>\r\n    ));\r\n\r\n    return (\r\n    \r\n   \r\n     <div className=\"mediawidth\" style={{display:\"flex\",flexDirection:\"column\",justifyContent:\"center\",alignItems:\"center\",backgroundColor:\"#dff2f2\"}}>\r\n       {list}\r\n     </div>\r\n    \r\n    \r\n    \r\n    );\r\n  }\r\n ","C:\\Users\\pranshu\\Documents\\bankingfrontend\\src\\components\\navbar.js",[],"C:\\Users\\pranshu\\Documents\\bankingfrontend\\src\\context\\usersinfo.js",[],"C:\\Users\\pranshu\\Documents\\bankingfrontend\\src\\context\\transactioninfo.js",[],"C:\\Users\\pranshu\\Documents\\bankingfrontend\\src\\page\\transactions.js",["55"],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":29,"column":8,"nodeType":"62","messageId":"63","endLine":29,"endColumn":17},{"ruleId":"60","severity":1,"message":"64","line":30,"column":8,"nodeType":"62","messageId":"63","endLine":30,"endColumn":19},{"ruleId":"65","severity":1,"message":"66","line":64,"column":21,"nodeType":"67","endLine":64,"endColumn":23,"suggestions":"68"},{"ruleId":"60","severity":1,"message":"64","line":29,"column":8,"nodeType":"62","messageId":"63","endLine":29,"endColumn":19},{"ruleId":"65","severity":1,"message":"69","line":55,"column":5,"nodeType":"67","endLine":55,"endColumn":15,"suggestions":"70"},{"ruleId":"60","severity":1,"message":"71","line":1,"column":9,"nodeType":"62","messageId":"63","endLine":1,"endColumn":18},{"ruleId":"60","severity":1,"message":"72","line":9,"column":18,"nodeType":"62","messageId":"63","endLine":9,"endColumn":30},{"ruleId":"60","severity":1,"message":"73","line":9,"column":22,"nodeType":"62","messageId":"63","endLine":9,"endColumn":36},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'customers' is assigned a value but never used.","Identifier","unusedVar","'transaction' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setCustomers' and 'setTransaction'. Either include them or remove the dependency array.","ArrayExpression",["76"],"React Hook useEffect has missing dependencies: 'customers' and 'history'. Either include them or remove the dependency array.",["77"],"'useEffect' is defined but never used.","'setCustomers' is assigned a value but never used.","'setTransaction' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},"Update the dependencies array to be: [setCustomers, setTransaction]",{"range":"82","text":"83"},"Update the dependencies array to be: [customers, history, location]",{"range":"84","text":"85"},[1460,1462],"[setCustomers, setTransaction]",[1542,1552],"[customers, history, location]"]